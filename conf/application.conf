# https://www.playframework.com/documentation/latest/Configuration
play {
  akka {
    jvm-exit-on-fatal-error = on
  }
  http {
    secret.key = "change-me"
    secret.key = ${?SERVICE_HTTP_SECRET}
  }
  filters {
    disabled += play.filters.hosts.AllowedHostsFilter
    disabled += play.filters.csrf.CSRFFilter
    enabled  += play.filters.gzip.GzipFilter
    enabled  += play.filters.cors.CORSFilter
  }

  ###################################################################
  # DB Evolutions
  # https://www.playframework.com/documentation/2.8.x/Evolutions
  ###################################################################
  evolutions.db.default {
    enabled=true
    autoApply=true
    autoApplyDowns=false
    useLocks=true
    autocommit=false
  }
}

smtp {
  app-name = "Fitcentive"
  app-name = ${?APP_NAME}

  no-reply-email = "no-reply@fitcentive.xyz"
  no-reply-email = ${?NO_REPLY_EMAIL_ID}

  host = "localhost"
  host = ${?SMTP_HOST}

  port = 1025
  port = ${?SMTP_PORT}

  auth {
    user = ""
    user = ${?SMTP_USER}

    password = ""
    password = ${?SMTP_PASSWORD}
  }

  startTls = "false"
}

gcp {
  project = "fitcentive-dev-03"
  project = ${?GCP_PROJECT_NAME}

  firebase {
    service-account-string-credentials = "replace-me"
    service-account-string-credentials = ${?FIREBASE_APPLICATION_CREDENTIALS}

    database-url = "replace-me"
    database-url = ${?FIREBASE_DATABASE_URL}
  }

  pubsub {

    service-account-string-credentials = "replace-me"
    service-account-string-credentials = ${?GOOGLE_APPLICATION_CREDENTIALS}

    topics {
      email-verification-token-created = "email-verification-token-created"
      email-verification-token-created = ${?TOPIC_EMAIL_VERIFICATION_TOKEN_CREATED}

      user-friend-requested = "user-friend-requested"
      user-friend-requested = ${?TOPIC_USER_FRIEND_REQUESTED}

      user-friend-request-decision = "user-friend-request-decision"
      user-friend-request-decision = ${?TOPIC_USER_FRIEND_REQUEST_DECISION}

      user-commented-on-post = "user-commented-on-post"
      user-commented-on-post = ${?TOPIC_USER_COMMENTED_ON_POST}

      user-liked-post = "user-liked-post"
      user-liked-post = ${?TOPIC_USER_LIKED_POST}

      chat-room-message-sent = "chat-room-message-sent"
      chat-room-message-sent = ${?TOPIC_CHAT_ROOM_MESSAGE_SENT}

      participant-added-to-meetup = "participant-added-to-meetup"
      participant-added-to-meetup = ${?TOPIC_PARTICIPANT_ADDED_TO_MEETUP}

      participant-added-availability-to-meetup = "participant-added-availability-to-meetup"
      participant-added-availability-to-meetup = ${?TOPIC_PARTICIPANT_ADDED_AVAILABILITY_TO_MEETUP}

      meetup-decision = "meetup-decision"
      meetup-decision = ${?TOPIC_MEETUP_DECISION}

      meetup-reminder = "meetup-reminder"
      meetup-reminder = ${?TOPIC_MEETUP_REMINDER}

      meetup-location-changed = "meetup-location-changed"
      meetup-location-changed = ${?TOPIC_MEETUP_LOCATION_CHANGED}
    }

    subscriptions {
      email-verification-token-created = "email-verification-token-created"
      email-verification-token-created = ${?SUBSCRIPTION_EMAIL_VERIFICATION_TOKEN_CREATED}

      user-friend-requested = "user-friend-requested"
      user-friend-requested = ${?SUBSCRIPTION_USER_FRIEND_REQUESTED}

      user-friend-request-decision = "user-friend-request-decision"
      user-friend-request-decision = ${?SUBSCRIPTION_USER_FRIEND_REQUEST_DECISION}

      user-commented-on-post = "user-commented-on-post"
      user-commented-on-post = ${?SUBSCRIPTION_USER_COMMENTED_ON_POST}

      user-liked-post = "user-liked-post"
      user-liked-post = ${?SUBSCRIPTION_USER_LIKED_POST}

      chat-room-message-sent = "chat-room-message-sent"
      chat-room-message-sent = ${?SUBSCRIPTION_CHAT_ROOM_MESSAGE_SENT}

      participant-added-to-meetup = "participant-added-to-meetup"
      participant-added-to-meetup = ${?SUBSCRIPTION_PARTICIPANT_ADDED_TO_MEETUP}

      participant-added-availability-to-meetup = "participant-added-availability-to-meetup"
      participant-added-availability-to-meetup = ${?SUBSCRIPTION_PARTICIPANT_ADDED_AVAILABILITY_TO_MEETUP}

      meetup-decision = "meetup-decision"
      meetup-decision = ${?SUBSCRIPTION_MEETUP_DECISION}

      meetup-reminder = "meetup-reminder"
      meetup-reminder = ${?SUBSCRIPTION_MEETUP_REMINDER}

      meetup-location-changed = "meetup-location-changed"
      meetup-location-changed = ${?SUBSCRIPTION_MEETUP_LOCATION_CHANGED}
    }
  }

}

environment {
  runtime-environment = "local"
  runtime-environment = ${?RUNTIME_ENVIRONMENT}
}


fixedConnectionPool = 9

# specific thread pools
contexts {

  smtp-execution-context {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = ${fixedConnectionPool}
    }
  }

  pubsub-execution-context {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = ${fixedConnectionPool}
    }
  }

  firebase-execution-context {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = ${fixedConnectionPool}
    }
  }

}

#################################################################
# DB Connections
# https://www.playframework.com/documentation/2.8.x/SettingsJDBC
# https://www.playframework.com/documentation/2.8.x/ScalaDatabase
#################################################################

db-config {
  db-host = "localhost"
  db-host = ${?DB_HOST}

  db-port = "1211"
  db-port = ${?DB_PORT}

  db-database = "postgres"
  db-database = ${?DB_DATABASE}
}

db.default {
  driver=org.postgresql.Driver
  url="jdbc:postgresql://"${db-config.db-host}":"${db-config.db-port}"/"${db-config.db-database}

  username="postgres"
  username=${?DB_USER}

  password="postgres"
  password=${?DB_PASSWORD}

  logSql=true
  logStatements=true
}


#################################################################
# JDBC Pool
# https://www.playframework.com/documentation/2.8.x/SettingsJDBC
# https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
#################################################################

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
    hikaricp.connectionTestQuery = "SELECT 1"
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

services {

  user-service {
    host: "http://localhost"
    host: ${?USER_SERVICE_HOST}

    port: "9001"
    port: ${?USER_SERVICE_PORT}
  }

  server {
    internal-service-secret: "change_this_service_secret_soon"
    internal-service-secret: ${?INTERNAL_SERVICE_SECRET}
  }
}

jwt {
  issuer = "https://auth.fitcentive.xyz"
  issuer = ${?JWT_ISSUER}
}

keycloak {
  server-url: "http://localhost:8080/auth",
  server-url: ${?KEYCLOAK_SERVER_URL},
}

image {
  host-url: "https://api.fitcentive.xyz/api/gateway/image"
  host-url: ${?IMAGE_HOST_BASE_URL},
}

play.modules.enabled += "io.fitcentive.notification.modules.PubSubModule"
play.modules.enabled += "io.fitcentive.notification.modules.AuthActionsModule"
play.modules.enabled += "io.fitcentive.notification.modules.FirebaseModule"

play.server.pidfile.path=/dev/null

